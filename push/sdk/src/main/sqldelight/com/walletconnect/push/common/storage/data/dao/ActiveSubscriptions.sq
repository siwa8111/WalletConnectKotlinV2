import kotlin.Boolean;
import kotlin.Pair;
import kotlin.String;
import kotlin.collections.Map;

CREATE TABLE ActiveSubscriptions (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    account TEXT NOT NULL,
    expiry INTEGER NOT NULL,
    relay_protocol TEXT NOT NULL,
    relay_data TEXT DEFAULT NULL,
    map_of_scope TEXT AS Map<String, Pair<String, Boolean>> NOT NULL,
    dapp_generated_public_key TEXT NOT NULL,
    push_topic TEXT UNIQUE NOT NULL,
    response_topic TEXT UNIQUE NOT NULL
);

insertOrAbortActiveSubscribtion:
INSERT OR ABORT INTO ActiveSubscriptions(account, expiry, relay_protocol, relay_data, map_of_scope, dapp_generated_public_key, push_topic, response_topic)
VALUES ( ?, ?, ?, ?, ? , ?, ?, ?);


getSubscriptionByDappGeneratedPublicKey:
SELECT account, expiry, relay_protocol, relay_data, map_of_scope, dapp_generated_public_key, push_topic, response_topic
FROM ActiveSubscriptions
WHERE dapp_generated_public_key = ?;

getAllActiveSubscriptions:
SELECT account, expiry, relay_protocol, relay_data, map_of_scope, dapp_generated_public_key, push_topic, response_topic
FROM ActiveSubscriptions;

getActiveSubscriptionByPushTopic:
SELECT account, expiry, relay_protocol, relay_data, map_of_scope, dapp_generated_public_key, push_topic, response_topic
FROM ActiveSubscriptions
WHERE push_topic = ?;

getActiveSubscriptionResponseTopicByPushTopic:
SELECT response_topic
FROM ActiveSubscriptions
WHERE push_topic = ?;

updateSubscriptionScopeAndExpiryByPushTopic:
UPDATE OR ABORT ActiveSubscriptions
SET map_of_scope = ?, expiry = ?
WHERE push_topic = ?;

deleteByPushTopic:
DELETE FROM ActiveSubscriptions
WHERE push_topic = ?;